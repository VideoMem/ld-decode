#!/usr/bin/env python3
import os
import sys
import signal
import argparse
import json
import traceback

import lddecode.utils as lddu
from lddecode.utils_logging import init_logging
from cvbsdecode.process import CVBSDecode
import vhsdecode.formats as f

CXADC_FREQ = (8 * 315.0) / 88.0  # 28.636363636
CXADC_FREQ_HIGH = 3150.0 / 88.0  # 35.795454545
CXADC_TENBIT_FREQ = (8 * 315.0) / 88.0 / 2.0  # 14.318181818
CXADC_TENBIT_FREQ_HIGH = 3150.0 / 88.0 / 2.0  # 17.897727272

parser = argparse.ArgumentParser(description="Extracts video from raw cvbs captures")
parser.add_argument("infile", metavar="infile", type=str, help="source file")
parser.add_argument(
    "outfile", metavar="outfile", type=str, help="base name for destination files"
)
parser.add_argument(
    "-s",
    "--start",
    metavar="start",
    type=int,
    default=0,
    help="rough jump to frame n of capture (default is 0)",
)
parser.add_argument(
    "--start_fileloc",
    metavar="start_fileloc",
    type=float,
    default=-1,
    help="jump to precise sample # in the file",
)
parser.add_argument(
    "-S",
    "--seek",
    metavar="seek",
    type=int,
    default=-1,
    help="seek to frame n of capture",
)
# parser.add_argument('-E', '--end', metavar='end', type=int, default=-1, help='cutting: last frame')
parser.add_argument(
    "-l",
    "--length",
    metavar="length",
    type=int,
    default=110000,
    help="limit length to n frames",
)
parser.add_argument(
    "-p", "--pal", dest="pal", action="store_true", help="source is in PAL format"
)
parser.add_argument(
    "-n", "--ntsc", dest="ntsc", action="store_true", help="source is in NTSC format"
)
parser.add_argument(
    "-t",
    "--threads",
    metavar="threads",
    type=int,
    default=1,
    help="number of CPU threads to use",
)
parser.add_argument(
    "-f",
    "--frequency",
    dest="inputfreq",
    metavar="FREQ",
    type=lddu.parse_frequency,
    default=None,
    help="RF sampling frequency in source file (default is 40MHz)",
)
# parser.add_argument('-c', '--cut', dest='cut', action='store_true', help='cut (to r16) instead of decode')
# parser.add_argument('-m', '--MTF', metavar='mtf', type=float, default=None, help='mtf compensation multiplier')
# parser.add_argument('--MTF_offset', metavar='mtf_offset', type=float, default=None, help='mtf compensation offset')
parser.add_argument(
    "--NTSCJ",
    dest="ntscj",
    action="store_true",
    help="source is in NTSC-J (IRE 0 black) format (untested)",
)
# parser.add_argument(
#     "-L",
#     "--level_adjust",
#     dest="level_adjust",
#     metavar="value",
#     type=float,
#     default=0.2,
#     help="Multiply top/bottom IRE in json by 1 +/- this value (used to avoid clipping on RGB conversion in chroma decoder) _ .",
# )
parser.add_argument(
    "--cxadc",
    dest="cxadc",
    action="store_true",
    default=False,
    help="Use cxadc input frequency (~28,63 Mhz)",
)
parser.add_argument(
    "--cxadc3",
    dest="cxadc3",
    action="store_true",
    default=False,
    help="Use cxadc ten fsc input frequency (~35,79 Mhz)",
)
parser.add_argument(
    "--10cxadc",
    dest="cxadc_tenbit",
    action="store_true",
    default=False,
    help="Use cxadc input frequency in ten bit mode (~14,31 Mhz)",
)
parser.add_argument(
    "--10cxadc3",
    dest="cxadc3_tenbit",
    action="store_true",
    default=False,
    help="Use cxadc ten fsc input frequency in ten bit mode (~17,89 Mhz)",
)
parser.add_argument(
    "--noAGC", dest="noAGC", action="store_true", default=False, help="Disable AGC"
)
parser.add_argument(
    "-ct",
    "--chroma_trap",
    dest="chroma_trap",
    action="store_true",
    default=False,
    help="Enable filter to reduce chroma interference on luma.",
)
parser.add_argument(
    "--notch",
    dest="notch",
    metavar="notch",
    type=lddu.parse_frequency,
    default=None,
    help="Center frequency of optional notch filter on rf and chroma.",
)

parser.add_argument(
    "--notch_q",
    dest="notch_q",
    metavar="notch_q",
    type=float,
    default=10.0,
    help="Q factor for notch filter",
)
parser.add_argument(
    "-A",
    "--auto_sync",
    dest="auto_sync",
    action="store_true",
    default=False,
    help="Enable auto sync level detection.",
)

args = parser.parse_args()
filename = args.infile
outname = args.outfile
firstframe = args.start
req_frames = args.length
system = "PAL" if args.pal else "NTSC"

if args.pal and args.ntsc:
    print("ERROR: Can only be PAL or NTSC")
    exit(1)

sample_freq = (
    CXADC_FREQ
    if args.cxadc
    else CXADC_FREQ_HIGH
    if args.cxadc3
    else CXADC_TENBIT_FREQ
    if args.cxadc_tenbit
    else CXADC_TENBIT_FREQ_HIGH
    if args.cxadc3_tenbit
    else args.inputfreq
)

try:
    loader = lddu.make_loader(filename, sample_freq)
except ValueError as e:
    print(e)
    exit(1)

rf_options = {
    "chroma_trap": args.chroma_trap,
    "notch": args.notch,
    "notch_q": args.notch_q,
    "auto_sync": args.auto_sync
}

extra_options = {
    "useAGC": not args.noAGC,
    "cvbs": True,
}

# Wrap the LDdecode creation so that the signal handler is not taken by sub-threads,
# allowing SIGINT/control-C's to be handled cleanly
original_sigint_handler = signal.signal(signal.SIGINT, signal.SIG_IGN)

logger = init_logging(outname + ".log")

# Initialize CVBS decoder
# Note, we pass 40 as sample frequency, as any other will be resampled by the
# loader function.
vhsd = CVBSDecode(
    filename,
    outname,
    loader,
    logger,
    system=system,
    threads=args.threads,
    inputfreq=40,
    level_adjust=0.2,
    # level_adjust=args.level_adjust,
    rf_options=rf_options,
    extra_options=extra_options,
)

signal.signal(signal.SIGINT, original_sigint_handler)

if args.start_fileloc != -1:
    vhsd.roughseek(args.start_fileloc, False)
else:
    vhsd.roughseek(firstframe * 2)


if system == "NTSC" and not args.ntscj:
    vhsd.blackIRE = 7.5

if args.seek != -1:
    if vhsd.seek(args.seek if firstframe == 0 else firstframe, args.seek) is None:
        print("ERROR: Seeking failed", file=sys.stderr)
        exit(1)

# if args.MTF is not None:
#    ldd.rf.mtf_mult = args.MTF

# if args.MTF_offset is not None:
#    ldd.rf.mtf_offset = args.MTF_offset


def write_json(vhsd, outname):
    jsondict = vhsd.build_json(vhsd.curfield)

    fp = open(outname + ".tbc.json.tmp", "w")
    json.dump(jsondict, fp, indent=4)
    fp.write("\n")
    fp.close()

    os.rename(outname + ".tbc.json.tmp", outname + ".tbc.json")


done = False

jsondumper = lddu.jsondump_thread(vhsd, outname)


def cleanup(outname):
    jsondumper.put(vhsd.build_json(vhsd.curfield))
    vhsd.close()
    jsondumper.put(None)


while not done and vhsd.fields_written < (req_frames * 2):
    try:
        f = vhsd.readfield()
    except KeyboardInterrupt:
        print("Terminated, saving JSON and exiting")
        cleanup(outname)
        exit(1)
    except Exception as err:
        print(
            "\nERROR - please paste the following into a bug report:", file=sys.stderr
        )
        print("current sample:", vhsd.fdoffset, file=sys.stderr)
        print("arguments:", args, file=sys.stderr)
        print("Exception:", err, " Traceback:", file=sys.stderr)
        traceback.print_tb(err.__traceback__)
        cleanup(outname)
        exit(1)

    if f is None:
        # or (args.ignoreleadout == False and vhsd.leadOut == True):
        done = True

    if vhsd.fields_written < 100 or ((vhsd.fields_written % 500) == 0):
        jsondumper.put(vhsd.build_json(vhsd.curfield))

print("saving JSON and exiting")
cleanup(outname)
exit(0)
